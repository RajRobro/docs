{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Software Development","text":""},{"location":"diagram/","title":"Diagram","text":""},{"location":"diagram/#classes","title":"Classes","text":"<pre><code>---\nconfig:\n  layout: dagre\n---\nclassDiagram\ndirection TB\n    class EventData {\n        +~EventData()\n    }\n    class WidthCheck {\n        +float maxWidth\n        +float minWidth\n    }\n    class ActionEventTracker {\n        +ActionEventTracker()\n        +bool shouldTriggerEvent()\n        +void triggerEvent()\n        +void setCooldown(unsigned long long cooldownMillis)\n    }\n    class ActionEventManager {\n        +void addEvent(EventType event)\n        +bool shouldTriggerEvent(EventType event)\n        +void triggerEvent(EventType event)\n        +void setEventData(EventType event, std::shared_ptr data)\n    }\n    class EventType {\n        IMAGE_SAVER_HEALTH_CHECK\n        SYSTEM_RUNNING_IN_FAULT\n        ROLL_START_BUTTON\n        UNKNOWN\n    }\n    class EventTypeUtils {\n        +static EventType getEventTypeForErrorCode(std::string error_code)\n    }\n    class BaseType {\n        +virtual json toJSON() = 0\n        +virtual bool loadJSON(json type) = 0\n    }\n    class Job {\n    }\n    class Roll {\n    }\n    class RollWidth {\n    }\n    class Speed {\n    }\n    class Defect {\n    }\n    class CameraConfig {\n    }\n    class GroupConfig {\n    }\n    class CameraManager {\n        +CameraParams getCameraParams()\n        +WidthParams getWidthParams()\n        +bool initCamera()\n    }\n    class CameraNode {\n        +void startLooping()\n        +void processAndPublishImage()\n    }\n    class CameraParams {\n    }\n    class WidthParams {\n    }\n    class GrabedImage {\n    }\n    class CameraHighSpeedSimulator {\n    }\n    class DefectsProcessor {\n    }\n    class Annotation {\n    }\n    class PointXY {\n    }\n    class RobroCameraAbstractClass {\n    }\n    class Recipe {\n        +Camera camera\n        +NN nn\n    }\n    class Camera {\n    }\n    class NN {\n    }\n    class Group {\n    }\n    class Yolov8 {\n    }\n    class PLCCommunication {\n        +bool initPLC()\n        +uint64_t getRunningMeterMM()\n    }\n    class BuzzerControl {\n        +void turnOn(int durationMs)\n        +void turnOff()\n        +void beep(int count)\n    }\n    class RobroModbusLib {\n    }\n    class MySQLClient {\n        + static MySQLClient&amp; getInstance()\n        + int64_t add_state_log(...)\n    }\n    class MySQLDataManager {\n        +void setupRollsLog()\n        +void logRollData(...)\n        +void logDefectData(...)\n    }\n    class ReportingNode {\n        +void rollDataCallback(String msg)\n        +void defectDataCallback(String msg)\n    }\n    class SystemStateTracker {\n        +bool changeState(string new_state)\n        +string getCurrentState()\n    }\n    class ComponentStateTrackerLogger {\n        +bool changeState(ComponentState new_state)\n        +string getCurrentState()\n    }\n    class SystemState {\n    }\n    class WeavingInspection {\n        +void clearDetections()\n        +bool isDetectionsAvailable()\n        +void addSystemLog(string severity, string msg, string code)\n    }\n    class SpeedCalculator {\n        +void addPosition(double currentPosition)\n        +double calculateSpeed()\n        +void reset()\n    }\n    class LogUtils {\n        +static LogCode getLogCodeFromString(string codeStr)\n        +static LogSeverity getLogSeverityFromString(string severityStr)\n    }\n    class LogCode {\n    }\n    class LogSeverity {\n    }\n    class LogComponent {\n    }\n    class ComponentState {\n    }\n\n    &lt;&lt;abstract&gt;&gt; EventData\n    &lt;&lt;singleton&gt;&gt; MySQLClient\n\n    EventData &lt;|-- WidthCheck\n    ActionEventManager --&gt; ActionEventTracker\n    ActionEventManager --&gt; EventData\n    ActionEventManager --&gt; EventType\n    EventTypeUtils --&gt; EventType\n    BaseType &lt;|-- Job\n    BaseType &lt;|-- Roll\n    BaseType &lt;|-- RollWidth\n    BaseType &lt;|-- Speed\n    BaseType &lt;|-- Defect\n    BaseType &lt;|-- CameraConfig\n    BaseType &lt;|-- GroupConfig\n    GroupConfig --&gt; CameraConfig : manages (via IDs)\n    CameraHighSpeedSimulator --&gt; RobroCameraAbstractClass : uses\n    CameraManager --&gt; CameraParams\n    CameraManager --&gt; WidthParams\n    CameraNode --&gt; CameraManager\n    CameraNode --&gt; CameraParams\n    CameraNode --&gt; WidthParams\n    CameraNode --&gt; GrabedImage\n    CameraNode --&gt; DefectsProcessor\n    Annotation --&gt; PointXY\n    DefectsProcessor --&gt; Annotation\n    NN --&gt; Group\n    NN --&gt; Yolov8\n    Recipe --&gt; Camera\n    Recipe --&gt; NN\n    PLCCommunication --&gt; RobroModbusLib : uses\n    PLCCommunication --&gt; MySQLClient : logs via\n    ReportingNode --&gt; MySQLDataManager\n    ReportingNode --&gt; Roll\n    ReportingNode --&gt; Defect\n    ReportingNode --&gt; Job\n    ReportingNode --&gt; RollWidth\n    ReportingNode --&gt; Speed\n    SystemStateTracker --&gt; SystemState\n    ComponentStateTrackerLogger --&gt; MySQLClient\n    WeavingInspection --&gt; Recipe\n    WeavingInspection --&gt; ActionEventManager\n    WeavingInspection --&gt; PLCCommunication\n    WeavingInspection --&gt; BuzzerControl\n    WeavingInspection --&gt; RollWidth\n    WeavingInspection --&gt; SpeedCalculator\n    WeavingInspection --&gt; MySQLClient\n    WeavingInspection --&gt; Roll\n    WeavingInspection --&gt; Job\n    WeavingInspection --&gt; Speed\n    WeavingInspection --&gt; ComponentStateTrackerLogger\n    LogUtils --&gt; LogCode\n    LogUtils --&gt; LogSeverity\n    LogUtils --&gt; LogComponent\n    LogUtils --&gt; ComponentState\n\n    style CameraNode fill:#f0fff4,stroke:#228b22,stroke-width:2px\n\n    style ReportingNode fill:#fff5e6,stroke:#ff8c00,stroke-width:2px\n\n    style WeavingInspection fill:#e6f7ff,stroke:#0366d6,stroke-width:2px</code></pre>"}]}